#!/bin/bash

# Script to automatically generate API-Storybook integration documentation
# Author: Visor Urbano Team
# Description: Scans the project and generates mappings between routes, components and endpoints

echo "🔄 Generating API-Storybook integration documentation..."

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DOCS_OUTPUT="$PROJECT_ROOT/visor-urbano-docs/docs/development/generated-api-integration.md"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}📂 Scanning frontend routes...${NC}"
FRONTEND_ROUTES=$(find "$PROJECT_ROOT/apps/frontend/app/routes" -name "*.tsx" -type f | wc -l)
echo -e "${GREEN}✅ Found $FRONTEND_ROUTES routes${NC}"

echo -e "${BLUE}📚 Scanning Storybook stories...${NC}"
STORYBOOK_STORIES=$(find "$PROJECT_ROOT/apps/frontend" -name "*.stories.tsx" -type f | wc -l)
echo -e "${GREEN}✅ Found $STORYBOOK_STORIES stories${NC}"

echo -e "${BLUE}🛣️ Scanning backend endpoints...${NC}"
BACKEND_ENDPOINTS=$(grep -r "@router\." "$PROJECT_ROOT/apps/backend/app/routers" --include="*.py" | wc -l)
echo -e "${GREEN}✅ Found $BACKEND_ENDPOINTS endpoints${NC}"

# Function to extract story path from a stories file
extract_story_path() {
    local file="$1"
    local title=$(grep -o "title: '[^']*'" "$file" 2>/dev/null | sed "s/title: '//g" | sed "s/'//g")
    if [[ -n "$title" ]]; then
        echo "$title"
    else
        local component_name=$(basename "$file" .stories.tsx)
        echo "Components/$component_name"
    fi
}

# Function to extract endpoints from a router
extract_endpoints() {
    local file="$1"
    grep -oE "@router\.(get|post|put|delete|patch)\([\"'][^\"']*[\"']" "$file" 2>/dev/null | \
    sed 's/@router\.\([a-z]*\)(\([\"'\'']\)\([^\"'\'']*\)\([\"'\'']\)/\U\1\E \3/g'
}

# Function to find components related to a route
find_related_components() {
    local route_file="$1"
    local route_name=$(basename "$route_file" .tsx)
    
    # Search for component imports in the file
    local imports=$(grep -oE "import.*from ['\"]\.\.\/components\/[^'\"]*" "$route_file" 2>/dev/null | \
                   sed "s/import.*from ['\"]\.\.\/components\///g" | \
                   sed "s/['\"]//g" | sed "s/\/[^\/]*$//g" | sort -u)
    
    # Search for components mentioned in the file (without import)
    local mentions=$(grep -oE "[A-Z][a-zA-Z]*(?=\s|<|>)" "$route_file" 2>/dev/null | sort -u)
    
    echo "$imports"
}

# Function to find API calls in a route
find_api_calls() {
    local route_file="$1"
    
    # Search for fetch calls
    local fetch_calls=$(grep -oE "fetch\(['\"][^'\"]*['\"]" "$route_file" 2>/dev/null | \
                       sed "s/fetch(['\"]//g" | sed "s/['\"]//g")
    
    # Search for axios calls
    local axios_calls=$(grep -oE "(axios\.(get|post|put|delete|patch)|useFetcher\(\))" "$route_file" 2>/dev/null)
    
    echo "$fetch_calls"
}

# Generate documentation
cat > "$DOCS_OUTPUT" << EOF
# 🔗 API-Storybook Integration (Automatically Generated)

> 🤖 This documentation is automatically generated by running \`./scripts/generate-api-docs.sh\`
> 🔄 **Last update:** $(date)

## 📊 Project Statistics

- **Frontend Routes:** $FRONTEND_ROUTES files
- **Storybook Stories:** $STORYBOOK_STORIES files  
- **Backend Endpoints:** $BACKEND_ENDPOINTS endpoints
- **Last update:** $(date)

## 🔗 Development Links

- **🎨 [Local Storybook](http://localhost:6006)** - Interactive components
- **📡 [Local Swagger API](http://localhost:8000/docs)** - Endpoint documentation
- **🔧 [Local ReDoc API](http://localhost:8000/redoc)** - Alternative API view

## 🗺️ Detailed Route-Component-API Mapping

> 💡 **Tip:** Click the links to open directly in Storybook or Swagger

EOF

# Process frontend routes with intelligent mapping
echo -e "${YELLOW}🔍 Generating intelligent route mapping...${NC}"
for route_file in "$PROJECT_ROOT/apps/frontend/app/routes"/*.tsx; do
    if [[ -f "$route_file" ]]; then
        route_name=$(basename "$route_file" .tsx)
        echo "" >> "$DOCS_OUTPUT"
        echo "### 📄 /$route_name" >> "$DOCS_OUTPUT"
        echo "**Archivo:** \`routes/$route_name.tsx\`" >> "$DOCS_OUTPUT"
        echo "" >> "$DOCS_OUTPUT"
        
        # Search for description or comment in the file
        description=$(head -10 "$route_file" | grep -o "//.*" | head -1 | sed 's/\/\/ *//')
        if [[ -n "$description" ]]; then
            echo "**Description:** $description" >> "$DOCS_OUTPUT"
            echo "" >> "$DOCS_OUTPUT"
        fi
        
        # Search for component imports in the route
        echo "**🎨 Related Storybook components:**" >> "$DOCS_OUTPUT"
        
        components=$(find_related_components "$route_file")
        found_components=false
        
        if [[ -n "$components" ]]; then
            while IFS= read -r component; do
                if [[ -n "$component" && "$component" != " " ]]; then
                    # Search for corresponding story file
                    story_file=$(find "$PROJECT_ROOT/apps/frontend/app/components" -name "${component}.stories.tsx" 2>/dev/null | head -1)
                    if [[ -f "$story_file" ]]; then
                        story_title=$(extract_story_path "$story_file")
                        story_url_path=$(echo "$story_title" | tr '/' '-' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
                        echo "- [${component}](http://localhost:6006/?path=/story/${story_url_path}--default)" >> "$DOCS_OUTPUT"
                        found_components=true
                    fi
                fi
            done <<< "$components"
        fi
        
        if [[ "$found_components" == false ]]; then
            echo "- ⚠️ *No components with stories detected*" >> "$DOCS_OUTPUT"
        fi
        
        echo "" >> "$DOCS_OUTPUT"
        echo "**📡 Related API endpoints:**" >> "$DOCS_OUTPUT"
        
        # Search for API calls in the route file
        api_calls=$(find_api_calls "$route_file")
        found_apis=false
        
        if [[ -n "$api_calls" ]]; then
            while IFS= read -r api_call; do
                if [[ -n "$api_call" && "$api_call" != " " ]]; then
                    # Determine HTTP method (default GET)
                    method="GET"
                    if [[ "$api_call" == *"/post"* ]] || [[ "$api_call" == *"/create"* ]]; then
                        method="POST"
                    elif [[ "$api_call" == *"/update"* ]] || [[ "$api_call" == *"/edit"* ]]; then
                        method="PUT"
                    elif [[ "$api_call" == *"/delete"* ]]; then
                        method="DELETE"
                    fi
                    
                    echo "- [\`$method $api_call\`](http://localhost:8000/docs#operations-tag-default)" >> "$DOCS_OUTPUT"
                    found_apis=true
                fi
            done <<< "$api_calls"
        fi
        
        if [[ "$found_apis" == false ]]; then
            echo "- ⚠️ *No direct API calls detected*" >> "$DOCS_OUTPUT"
        fi
        
        echo "" >> "$DOCS_OUTPUT"
        echo "---" >> "$DOCS_OUTPUT"
    fi
done

echo "" >> "$DOCS_OUTPUT"
echo "## 📚 Storybook Components Index" >> "$DOCS_OUTPUT"
echo "" >> "$DOCS_OUTPUT"

# List all stories with direct links
for story_file in $(find "$PROJECT_ROOT/apps/frontend" -name "*.stories.tsx" | sort); do
    component_name=$(basename "$story_file" .stories.tsx)
    story_title=$(extract_story_path "$story_file")
    story_url_path=$(echo "$story_title" | tr '/' '-' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
    
    echo "### 🎨 $component_name" >> "$DOCS_OUTPUT"
    echo "**File:** \`$(echo "$story_file" | sed "s|$PROJECT_ROOT/apps/frontend/||")\`" >> "$DOCS_OUTPUT"
    echo "**Storybook:** [View component](http://localhost:6006/?path=/story/${story_url_path}--default)" >> "$DOCS_OUTPUT"
    
    # Extract exported stories
    exported_stories=$(grep -oE "export const [A-Za-z0-9_]*:" "$story_file" 2>/dev/null | sed 's/export const //g' | sed 's/://g')
    if [[ -n "$exported_stories" ]]; then
        echo "**Available variants:**" >> "$DOCS_OUTPUT"
        while IFS= read -r story; do
            if [[ -n "$story" && "$story" != "default" && "$story" != "Default" ]]; then
                story_variant=$(echo "$story" | tr '[:upper:]' '[:lower:]')
                echo "- [${story}](http://localhost:6006/?path=/story/${story_url_path}--${story_variant})" >> "$DOCS_OUTPUT"
            fi
        done <<< "$exported_stories"
    fi
    echo "" >> "$DOCS_OUTPUT"
done

echo "" >> "$DOCS_OUTPUT"
echo "## 🛣️ API Endpoints Index" >> "$DOCS_OUTPUT"
echo "" >> "$DOCS_OUTPUT"

# List all endpoints organized by router
for router_file in "$PROJECT_ROOT/apps/backend/app/routers"/*.py; do
    if [[ -f "$router_file" ]]; then
        router_name=$(basename "$router_file" .py)
        endpoints=$(extract_endpoints "$router_file")
        
        if [[ -n "$endpoints" ]]; then
            echo "### 📡 Router: $router_name" >> "$DOCS_OUTPUT"
            echo "**File:** \`app/routers/$router_name.py\`" >> "$DOCS_OUTPUT"
            echo "" >> "$DOCS_OUTPUT"
            
            while IFS= read -r endpoint; do
                if [[ -n "$endpoint" && "$endpoint" != " " ]]; then
                    method=$(echo "$endpoint" | cut -d' ' -f1)
                    path=$(echo "$endpoint" | cut -d' ' -f2-)
                    # Create direct link to Swagger for specific endpoint
                    swagger_tag=$(echo "$router_name" | tr '_' '-')
                    echo "- [\`$method $path\`](http://localhost:8000/docs#operations-$swagger_tag)" >> "$DOCS_OUTPUT"
                fi
            done <<< "$endpoints"
            echo "" >> "$DOCS_OUTPUT"
        fi
    fi
done

cat >> "$DOCS_OUTPUT" << 'EOF'

## 🎯 Development Guide

### For Frontend Developers
1. **Check Storybook** before creating new components
2. **Review API documentation** to understand available endpoints
3. **Use route mapping** to see which components and endpoints are related

### For Backend Developers  
1. **Document new endpoints** in Swagger with clear descriptions
2. **Group related endpoints** in the same router
3. **Use consistent tags** to facilitate navigation in Swagger

### For Integration
1. **Run this script** after adding new components or endpoints
2. **Verify links** in Storybook and Swagger before committing
3. **Update manual documentation** if automatic mapping is not sufficient

## 🔄 Regenerate Documentation

```bash
# From project root
./scripts/generate-api-docs.sh

# Or using pnpm
pnpm docs:generate-api
```

---

> 📝 **Note:** This documentation is updated automatically. For more specific mappings, edit `docs/development/api-integration.md`

EOF

echo -e "${GREEN}✅ Documentation generated successfully at:${NC}"
echo -e "${BLUE}   $DOCS_OUTPUT${NC}"
echo ""
echo -e "${YELLOW}🔗 Useful links:${NC}"
echo -e "   📖 Documentation: http://localhost:3000/docs/development/generated-api-integration"
echo -e "   🎨 Storybook: http://localhost:6006"  
echo -e "   📡 Swagger: http://localhost:8000/docs"
